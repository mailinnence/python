----------------------------------------------------------------------------------------------------------------------------------------------------------------
#1.클래스 부르기
class a():
    print(333)


a()
----------------------------------------------------------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------------------------------------------------
#2.생성자 초기화-1
class a():
    """주석처리해야한다"""

A=a() 
B=a()

A.lan="한국어"
A.name="홍길동"
B.lan="영어"
B.name="제임스"    

def speak(per):
    print("{}의 {}".format(per.name , per.lan))

speak(A)
speak(B)
----------------------------------------------------------------------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------------------------------------------------------------------
#3.생성자 초기화 >> 함수 부르기
class a():
    """주석처리해야한다"""


def speak(lan, name):
    ABC=a()
    ABC.lan=lan
    ABC.name=name
    return ABC




def walk(per):
    print("{}의 {}".format(per.lan , per.name))


a.walk=walk         #클래스 부르기
per=speak("33","B") #초기화
per.walk()          #리턴



#위 과정들은 너무 복잡하다 때문에 특수 메소드를 사용한다.
class a():
    #self 를 이용해서 초기화를 미리 해준다.
    def __init__(self ,lan ,name):
        self.lan=lan
        self.name=name
    
    def walk(self):
        print("{}의 {}".format(self.lan , self.name))
        
           

per=a("korea","홍길동")
per.walk()
----------------------------------------------------------------------------------------------------------------------------------------------------------------        
        
        




----------------------------------------------------------------------------------------------------------------------------------------------------------------        
        
        

class a():
    #self 를 이용해서 초기화를 미리 해준다.
    def __init__(self):
        print("객체가 생성되었습니다.")
    
    def walk(self):
        print("gdgd")
        
           

per=a()
per.walk()

----------------------------------------------------------------------------------------------------------------------------------------------------------------        
        
        




----------------------------------------------------------------------------------------------------------------------------------------------------------------        
class ggg():
    #self 를 이용해서 초기화를 미리 해준다.
    def __init__(self):
        self.a1=1
        self.a2=2            
        self.a3=3
    def A(self):
        ggg().B(self.a1+self.a2)
    def B(self , k):
        self.k=k
        print(self.k)


ggg().A()

----------------------------------------------------------------------------------------------------------------------------------------------------------------        
        
        




상속
----------------------------------------------------------------------------------------------------------------------------------------------------------------        

class animal():
    def walk(self):
        print("걷는다")
    def eat(self):
        print("먹는다")
        
#상속하는 방법        
class human(animal):        
    def wave(self):
        print("손을 흔든다")   

#상속하는 방법        
class dog(animal):        
    def wag(self):
        print("꼬리를 흔든다")   
            
            
                   
animal().eat()                
human().eat()    
dog().eat()     

human().wave()          
dog().wag()   
                
----------------------------------------------------------------------------------------------------------------------------------------------------------------        














class A():
    def a(self):
        print(3333)
    def b(self):
        A().a()



A().b()

    
