# set은 영어로 집합이라는 뜻입니다. 때문에 집합의 성질을 가지는 함수들을 비롯해 중복되지 않은 원소(unique)를 얻고자 할 때 사용
# 더 간단히 말하면 파이썬으로 집합을 표현할 때 사용


# set을 만드는 법.1 ----------------------------------
a = set([1, 2, 3])
print(a)
print(type(a))


'''
{1, 2, 3}
<class 'set'>
'''
# ------------------------------------------------------


# set을 만드는 법.2 -----------------------------------
a = set((1, 2, 3))
print(a)



'''
{1, 2, 3}
'''
# ------------------------------------------------------







# 특징 -----------------------------------------------
# 1.중복된 항목은 제거된다 
a = set([1, 1, 2, 3, 3, 4])
print(a)

'''
{1, 2, 3, 4}
'''

# 2.순서가 없다
a = set([4, 4, 3, 2, 1, 'a', 'b', 'a'])
print(a)


'''
{1, 2, 3, 4, 'b', 'a'}
'''


# 3.항목을 부를 수 없다.
print(a[0])


# 4. 형변환
b = list(a)
print(b)


'''
[1, 2, 3, 4, 'b', 'a']
'''

# ------------------------------------------------------






# 합집합 ---------------------------------------------

a = set([1, 2, 3])
b = set([3, 4, 5])

c = a.union(b)
print(c)


'''
{1, 2, 3, 4, 5}
'''

# ------------------------------------------------------








# 교집합 ---------------------------------------------

a = set([1, 2, 3])
b = set([3, 4, 5])

c = a.intersection(b)
print(c)

'''
{3}
'''

# ------------------------------------------------------









# 차집합 ---------------------------------------------

a = set([1, 2, 3])
b = set([3, 4, 5])

c = a.difference(b)
print(c)

'''
{1, 2}
'''
# ------------------------------------------------------









# set에 추가할 때 사용하는 명령어 : add -----------------
# !주의! 반드시 하나의 숫자 혹은 글자, 문장, 튜플만 가능합니다

s=set([1,2,3,4])
print(s) # {1, 2, 3, 4}
#추가
s.add(5)
print(s) # {1, 2, 3, 4, 5}
s.add('hellow nice meet you')
print(s) # {1, 2, 3, 4, 5, 'hellow nice meet you'}
s.add(('a','a','b'))
print(s) # {1, 2, 3, 4, 5, ('a', 'a', 'b'), 'hellow nice meet you'}



'''
{1, 2, 3, 4}
{1, 2, 3, 4, 5}
{1, 2, 3, 4, 5, 'hellow nice meet you'}
{1, 2, 3, 4, 5, ('a', 'a', 'b'), 'hellow nice meet you'}
'''

# ------------------------------------------------------








# set에 여러개의 값을 추가할 때 사용하는 명령어 : update --
s = set([1,2,3,4]) # 또는 s = {1,2,3,4}
print(s) # {1, 2, 3, 4}
s.update([1])
print(s) # {1, 2, 3, 4}
s.update([1,2,3,4])
print(s) # {1, 2, 3, 4}
s.update([1,2,1,7,7,7,'a','b',('a')])
print(s) # {1, 2, 3, 4, 'b', 7, 'a'}
a = [0,1,2,3]
s.update(a) 
print(s) # {0, 1, 2, 3, 4, 'b', 7, 'a'}
s.update({7,8,9,9})
print(s) # {0, 1, 2, 3, 4, 'b', 7, 8, 9, 'a'} 




'''
{1, 2, 3, 4}
{1, 2, 3, 4}
{1, 2, 3, 4}
{1, 2, 3, 4, 'a', 7, 'b'}
{0, 1, 2, 3, 4, 'a', 7, 'b'}
{0, 1, 2, 3, 4, 'a', 7, 8, 9, 'b'}
'''

# --------------------------------------------------------










# set 안의 값 제거하기------------------------------------
# remove  :  set 집합 안에 원소가 없는 경우 KeyError가 발생합니다.
# discard :  집합 안에 원소가 없는 경우에도 KeyError가 발생하지 않는다.

s = {0,1,2,3}
s.remove(0)
print(s) # {1, 2, 3}
#s.remove(0) # KeyError
s.discard(0)
print(s) # {1, 2, 3}


'''
{1, 2, 3}
{1, 2, 3}
'''
# --------------------------------------------------------








# set 연산자 활용 : 합집합, 교집합, 차집합, 대칭차집합------
# 합집합 : | or union
# 교집합 : & or intersection
# 차집합 : - or difference
# 대칭차집합(합집합 - 교집합) : ^ or symmetric_difference 


i = {1,2,3,4,5}
j = {3,5,7,9}
print(i|j) # {1, 2, 3, 4, 5, 7, 9}
print(i.union(j)) # {1, 2, 3, 4, 5, 7, 9}
print(i&j) # {3, 5}
print(i.intersection(j)) # {3, 5}
print(i-j) # {1, 2, 4}
print(i.difference(j)) # {1, 2, 4}
print(i^j) # {1, 2, 4, 7, 9}
print(i.symmetric_difference(j)) # {1, 2, 4, 7, 9} 



'''
{1, 2, 3, 4, 5, 7, 9}
{1, 2, 3, 4, 5, 7, 9}
{3, 5}
{3, 5}
{1, 2, 4}
{1, 2, 4}
{1, 2, 4, 7, 9}
{1, 2, 4, 7, 9}
'''


# --------------------------------------------------------







